
// ---------------------------------------------------------
// map-deep-get
// Get a value from nested map by the keys
//
// Required arguments:
// `$map` Map
// `$keys` String(s)
//
// Example of use:
// deep-map-get($dfr-spacing, 'xs', 'y')
//
// @return Unspecified (it may return anything as a result)
// ---------------------------------------------------------
@function map-deep-get ($map, $keys...) {
  @if type-of($map) != 'map' {
    @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
  }

  @each $key in $keys {
	@if not map-has-key($map, $key) {
	  @error 'The argument $map doesn\'t have some of the $keys: `#{$key}`. One of `[#{map-keys($map)}]` is required!';
      @return false;
    }
    $map: map-get($map, $key);
  }

  @return $map;
}

// ---------------------------------------------------------
// str-explode
// Split a string by delimiter
//
// Required arguments:
// `$string` String
// `$delimiter` String *predefined*
//
// Example of use:
// str-explode('some-things-will-never-change', '-')
//
// @return List
// ---------------------------------------------------------
@function str-explode ($string, $delimiter: '') {
  @if type-of($string) != 'string' {
    @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
  }
  @else if type-of($delimiter) != 'string' {
    @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
  }

  $result: ();
  $running: true;

  @if str-length($delimiter) == 0 {
    @for $i from 1 through str-length($string) {
      $result: append($result, str-slice($string, $i, $i));
    }

    @return $result;
  }

  @while $running {
    $index: str-index($string, $delimiter);

    @if $index != null {
      $item: str-slice($string, 1, ($index - 1));
      $result: append($result, $item);
      $string: str-slice($string, ($index + str-length($delimiter)));
    }
    @else {
      $running: false;
    }
  }

  @return append($result, $string);
}





